version: 2.1

jobs:
  #DEBIAN
  job-0-debian:
    docker:
      - image: "debian:latest"
    steps:
      - checkout
      - run:
          name: Update and install sudo
          command: "apt-get update && apt-get install -y sudo   &&  rm -rf /var/lib/apt/lists/* "
      - run:
          name: install qqy
          command: "apt-get update -qqy && apt-get -qqy install"
      - run:
          name: Install the required dev packages
          command: "apt-get install -yqq g++ python"
      - run:
          name: Install python3 separately
          command: "sudo apt-get install -yqq python3"
      - run:
          name: Install python devel
          command: "apt-get install -yqq python-dev"
      - run:
          name: python devel3 package
          command: "sudo apt-get install -yqq python3-dev"
      - run:
          name: installs distutils for building bindingswith python3 #check docs for info on that
          command: "apt-get install -yqq python3-distutils"
      - run:
          name: exports the cpath for fixing missing header
          command: |
            echo 'export CPATH=/usr/include/python3.8/' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: checks $CPATH envar after source
          command: echo '$CPATH'
      - run:
          name: installs the certificates
          command: apt-get install -y ca-certificates #this allows image to have a valid certificate for being able to upload artifacts to an external server
      #   - run:
      #       name: create test artifact
      #       command: touch ARTIFACT.ART  &&uname >> ARTIFACT.ART && cp ARTIFACT.ART /tmp/
      #   - store_artifacts:
      #       path: /tmp/ARTIFACT.ART
      #       destination: debian-ARTIFACT.ART
      #   - run:
      #       name: runs the array-generator PY2
      #       command: "cd projects/array-create/ && python2 setup.py build && cd build && cd lib* && cp ../../test.py . && python2 test.py"
      #   - run:
      #       name: cleans the content
      #       command: "cd projects/array-create/ && chmod 775 wipebuild.sh&&./wipebuild.sh"
      #   - run:
      #       name: runs the array-generator PY3
      #       command: "cd projects/array-create/ && python3 setup.py build && cd build &&cd lib* && cp ../../test.py . && python3 test.py"
      #   - run:
      #       name: runs the async-project PY2
      #       command: "cd projects/async-treahds/ && python2 setup.py build && cd build &&cd lib* && cp ../../test.py . && python2 test.py"
      #   - run:
      #       name: cleans the content
      #       command: "cd projects/async-treahds/ && chmod 775 wipebuild.sh&&./wipebuild.sh"
      #   - run:
      #       name: runs the async-project PY3
      #       command: "cd projects/async-treahds/ && python3 setup.py build && cd build &&cd lib* && cp ../../test.py . && python3 test.py"
      - run:
          name: builds and runs the twister module PY2
          command: cd projects/random-twister/ && python2 setup.py build && cd build && cd lib* && cp ../../test.py . && python2 test.py
      - run:
          name: create build archive for random twister module PY2
          command: cd projects/random-twister/ && tar -zcvf build-py2_tarball.tar.gz build && ls && cp build-py2_tarball.tar.gz /tmp/
      - run:
          name: cleans the previous build
          command: cd projects/random-twister/ && rm -rf build/*
      - run:
          name: builds and runs the twister module PY3
          command: cd projects/random-twister/ && python3 setup.py build && cd build && cd lib* && cp ../../test.py . && python3 test.py
      - run:
          name: create build archive for random twister module PY3
          command: cd projects/random-twister/ && tar -zcvf build-py3_tarball.tar.gz build && ls && cp build-py3_tarball.tar.gz /tmp/
      - run:
          name: builds the C-array converter
          command: cd projects/convert-array/ && python3 setup.py build
      - run:
          name: tests the C-array converter
          command: cd projects/convert-array/ && cd build && cd lib* && cp ../../test.py . && python3 test.py      
      - store_artifacts:
          path: /tmp/build-py2_tarball.tar.gz
          destination: debian-build-py2_tarball.tar.gz
      - store_artifacts:
          path: /tmp/build-py3_tarball.tar.gz
          destination: debian-build-py3_tarball.tar.gz
  # UBUNTU
  job-1-ubuntu:
    docker:
      - image: "ubuntu:latest"
    steps:
      - checkout
      - run:
          name: "set env vars again"
          command: |
            echo 'debconf debconf/frontend select Noninteractive' debconf-set-selections
            echo export DEBIAN_FRONTEND=noninteractive >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Update and install sudo
          command: "apt-get update && apt-get install -y sudo &&  rm -rf /var/lib/apt/lists/* "
      - run:
          name: install qqy
          command: apt-get update -qqy && apt-get -qqy install
      - run:
          name: Install the required packages
          command: "apt-get install -yqq g++ python"
      - run:
          name: Install the required packages
          command: "sudo apt-get install -yqq python3" # install the package separately for proper installation
      - run:
          name: python devel package
          command: "apt-get install -y python-dev"
      - run:
          name: python devel3 package
          command: "sudo apt-get install -yqq python3-dev"
      - run:
          name: installs distutils for building bindings with python #check docs for info on that
          command: "sudo apt-get install -yqq python3-distutils"
      - run:
          name: exports the cpath for fixing missing header
          command: |
            echo export CPATH=/usr/include/python3.8/ >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: installs the certificates
          command: apt-get install -y ca-certificates #this allows image to have a valid certificate
      - run:
          name: runs the array-generator PY2
          command: "cd projects/array-create/ && python2 setup.py build && cd build && cd lib* && cp ../../test.py . && python2 test.py"
      - run:
          name: cleans the content
          command: "cd projects/array-create/ && chmod 775 wipebuild.sh&&./wipebuild.sh"
      - run:
          name: runs the array-generator PY3
          command: "cd projects/array-create/ && python3 setup.py build && cd build &&cd lib* && cp ../../test.py . && python3 test.py"
      - run:
          name: runs the async-project PY2
          command: "cd projects/async-treahds/ && python2 setup.py build && cd build &&cd lib* && cp ../../test.py . && python2 test.py"
      - run:
          name: cleans the content
          command: "cd projects/async-treahds/ && chmod 775 wipebuild.sh&&./wipebuild.sh"
      - run:
          name: runs the async-project PY3
          command: "cd projects/async-treahds/ && python3 setup.py build && cd build &&cd lib* && cp ../../test.py . && python3 test.py"
      - run:
          name: builds and runs the twister module PY2
          command: cd projects/random-twister/ && python2 setup.py build && cd build && cd lib* && cp ../../test.py . && python2 test.py
      - run:
          name: create build archive for random twister module PY2
          command: cd projects/random-twister/ && tar -zcvf build-py2_tarball.tar.gz build && ls && cp build-py2_tarball.tar.gz /tmp/
      - run:
          name: cleans the previous build
          command: cd projects/random-twister/ && rm -rf build/*
      - run:
          name: builds and runs the twister module PY3
          command: cd projects/random-twister/ && python3 setup.py build && cd build && cd lib* && cp ../../test.py . && python3 test.py
      - run:
          name: create build archive for random twister module PY3
          command: cd projects/random-twister/ && tar -zcvf build-py3_tarball.tar.gz build && ls && cp build-py3_tarball.tar.gz /tmp/
      - run:
          name: builds the C-array converter
          command: cd projects/convert-array/ && python3 setup.py build
      - run:
          name: tests the C-array converter
          command: cd projects/convert-array/ && cd build && cd lib* && cp ../../test.py . && python3 test.py      
      - store_artifacts:
          path: /tmp/build-py2_tarball.tar.gz
          destination: ubuntu-build-py2_tarball.tar.gz
      - store_artifacts:
          path: /tmp/build-py3_tarball.tar.gz
          destination: ubuntu-build-py3_tarball.tar.gz
  # CENTOS
  job-2-centos:
    docker:
      - image: "centos:latest"
    steps:
      - checkout
      - run:
          name: install updates
          command: yum -y update && yum -y upgrade
      - run:
          name: install which  and tree package so we can check what is good
          command: yum -y install which tree
      - run:
          name: install dev package
          command: dnf groupinstall -y "Development Tools"
      - run:
          name: install python2 with dnf
          command: dnf install -y python2
      - run:
          name: install python3 with dnf
          command: dnf install -y python3
      - run:
          name: install python2 devel package # for getting the "Python.h" header file
          command: dnf install -y python2-devel # fixes missing header on build time
      - run:
          name: install python3 devel package # for getting the "Python.h" header file when building with python3
          command: dnf install -y python3-devel # fixes missing header on build time
      - run:
          name: builds and runs the twister module PY2
          command: cd projects/random-twister/ && python2 setup.py build && cd build && cd lib* && cp ../../test.py . && python2 test.py
      - run:
          name: create build archive for random twister module PY2
          command: cd projects/random-twister/ && tar -zcvf build-py2_tarball.tar.gz build && ls && cp build-py2_tarball.tar.gz /tmp/
      - run:
          name: cleans the previous build
          command: cd projects/random-twister/ && rm -rf build/*
      - run:
          name: builds and runs the twister module PY3
          command: cd projects/random-twister/ && python3 setup.py build && cd build && cd lib* && cp ../../test.py . && python3 test.py
      - run:
          name: create build archive for random twister module PY3
          command: cd projects/random-twister/ && tar -zcvf build-py3_tarball.tar.gz build && ls && cp build-py3_tarball.tar.gz /tmp/
      - run:
          name: builds the C-array converter
          command: cd projects/convert-array/ && python3 setup.py build
      - run:
          name: tests the C-array converter
          command: cd projects/convert-array/ && cd build && cd lib* && cp ../../test.py . && python3 test.py
      - run:
          name: test the class-module
          command: cd projects/class-module/ && python3 test.py
      - store_artifacts:
          path: /tmp/build-py2_tarball.tar.gz
          destination: centos-build-py2_tarball.tar.gz
      - store_artifacts:
          path: /tmp/build-py3_tarball.tar.gz
          destination: centos-build-py3_tarball.tar.gz
    #   - run:
    #       name: runs the array-generator PY2
    #       command: "cd projects/array-create/ && python2 setup.py build && cd build && cd lib* && cp ../../test.py . && python2 test.py"
    #   - run:
    #       name: cleans the content
    #       command: "cd projects/array-create/ && chmod 775 wipebuild.sh&&./wipebuild.sh"
    #   - run:
    #       name: runs the array-generator PY3
    #       command: "cd projects/array-create/ && python3 setup.py build && cd build &&cd lib* && cp ../../test.py . && python3 test.py"
    #   - run:
    #       name: runs the async-project PY2
    #       command: "cd projects/async-treahds/ && python2 setup.py build && cd build &&cd lib* && cp ../../test.py . && python2 test.py"
    #   - run:
    #       name: cleans the content
    #       command: "cd projects/async-treahds/ && chmod 775 wipebuild.sh&&./wipebuild.sh"
    #   - run:
    #       name: runs the async-project PY3
    #       command: "cd projects/async-treahds/ && python3 setup.py build && cd build &&cd lib* && cp ../../test.py . && python3 test.py"
  # CENTOS- 3
  job-3-centos:
    docker:
      - image: "centos:latest"
    steps:
      - checkout
      - run:
          name: install updates
          command: yum -y update && yum -y upgrade
      - run:
          name: install which  and tree package so we can check what is good
          command: yum -y install which tree
      - run:
          name: install dev package
          command: dnf groupinstall -y "Development Tools"
      - run:
          name: install python2 with dnf
          command: dnf install -y python2
      - run:
          name: install python3 with dnf
          command: dnf install -y python3
      - run:
          name: install python2 devel package # for getting the "Python.h" header file
          command: dnf install -y python2-devel # fixes missing header on build time
      - run:
          name: install python3 devel package # for getting the "Python.h" header file when building with python3
          command: dnf install -y python3-devel # fixes missing header on build time
      - run:
          name: build the class module
          command: cd projects/class-module && python3 setup.py build
      - run:
          name: copy the script to the lib location
          command: cd projects/class-module && cp test.py build/lib*
      - run:
          name: run the build script
          command: cd projects/class-module && cd build && cd lib* && python3 test.py
      - run:
          name: save the script as a log 
          command: cd projects/class-module && cd build && cd lib* && chmod 775 ./run.sh && ./run.sh >> build_process.log && cp build_process.log /tmp/
      - store_artifacts:
          path: /tmp/build_process.log
          destination: centOS-build_process.log
workflows:
  version: 2.1
  start-containers:
    jobs:
    #   - job-0-debian
    #   - job-1-ubuntu
    #   - job-2-centos
      - job-3-centos
